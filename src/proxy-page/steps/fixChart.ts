import { ContextService } from '../../context/context.service';
import { Step } from '../proxy-page.step';
import { ConfigService } from '@nestjs/config';

/**
 * ### Proxy page step to replace chart macro by the image generated by Confluence as attachment in the page.
 *
 * This module gets Cheerio to parse the page body and search for `div.chart-bootstrap-wrapper` which is used to wrap the chart macro meta-data for Confluence charts.
 *
 * @param  {ConfigService} config
 * @returns void
 */
export default (config: ConfigService): Step => {
  return (context: ContextService): void => {
    context.setPerfMark('fixChartMacro');
    const $ = context.getCheerioBody();
    const webBasePath = config.get('web.basePath');

    // Div  with div.chart-bootstrap-wrapper is used for Chart marcros
    $('.chart-bootstrap-wrapper').each(
      (_index: number, elementChart: cheerio.TagElement) => {
        const thisBlock = $(elementChart).html();
        if (!thisBlock) {
          return;
        }
        const attachmentRegex = new RegExp(
          // Will find <^FileName.png> in => "parameters":{ ... "attachment":"<^FileName.png>" ... }
          /"parameters":.*"attachment":"(.*?)\^(.*?)"/g,
        ).exec(thisBlock);
        // The previous RegExp is not taking into account the option to save attachment in another space
        // like the Conflence documentation describe in https://support.atlassian.com/confluence-cloud/docs/insert-the-chart-macro/#ChartMacro-AttachmentParameters
        // with options (only covering today the two first ones)
        // - ^attachmentName.png — the chart is saved as an attachment to the current page.
        // - page^attachmentName.png — the chart is saved as an attachment to the page name provided.
        // - space:page^attachmentName.png — the chart is saved as an attachment to the page name provided in the space indicated.
        const [, page, attachment] = attachmentRegex ?? [];

        if (attachment) {
          $(elementChart).prepend(
            `<figure><img class="img-zoomable"
                  src="${webBasePath}/wiki/download/attachments/${
              page !== '' ? page : context.getPageId()
            }/${attachment}"
                  alt="${attachment}" /></figure>`,
          );
        }
      },
    );

    // Remove this Chart script to remove unnecessary noise in the final HTML
    $('script.chart-render-data').each(
      (_index: number, elementChart: cheerio.TagElement) => {
        $(elementChart).remove();
      },
    );

    context.getPerfMeasure('fixChartMacro');
  };
};
