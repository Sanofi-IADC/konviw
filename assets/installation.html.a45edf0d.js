import{r as p,o,c,a as n,b as t,F as l,f as a,d as s}from"./app.1b93c534.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=a(`<h2 id="manual-setup" tabindex="-1"><a class="header-anchor" href="#manual-setup" aria-hidden="true">#</a> Manual setup</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">git</span> clone https://github.com/Sanofi-IADC/konviw.git

\u279C <span class="token builtin class-name">cd</span> konviw <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>

\u279C <span class="token function">npm</span> run build

\u279C <span class="token function">npm</span> run start
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="docker-setup" tabindex="-1"><a class="header-anchor" href="#docker-setup" aria-hidden="true">#</a> Docker setup</h2><ul><li>[ ] TODO</li></ul><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Configuration is made with environment variables. They can also be defined with the <code>.env</code> file when running locally. Check the <code>.env.example</code> for an example of environment file.</p>`,6),d=a("<li><code>NODE_ENV</code>: <code>development</code>, <code>test</code> or <code>production</code>. Default: <code>production</code></li><li><code>CPV_BASEPATH</code>: the base path where the app is exposed. Useful when exposed behind a reverse proxy. Used to generate links. Default: <code>/</code> (but defined as <code>/cpv</code> in production)</li><li><code>CPV_BASEHOST</code>: the domain URL to compose full URL to resolve images and links from the API, like https://www.example.com. <strong>Required</strong></li><li><code>CPV_CONFLUENCE_BASE_URL</code>: Confluence server base URL. <strong>Required</strong></li><li><code>CPV_CONFLUENCE_API_USERNAME</code>: Confluence API username (usually an email address). <strong>Required</strong></li>",5),k=n("code",null,"CPV_CONFLUENCE_API_TOKEN",-1),m=s(": Confluence API token (can be created "),b={href:"https://id.atlassian.com/manage/api-tokens",target:"_blank",rel:"noopener noreferrer"},h=s("here"),g=s("). "),f=n("strong",null,"Required",-1),v=a("<li><code>CPV_KONVIW_PRIVATE_PAGE</code>: A label to tag pages as private. <strong>Required</strong></li><li><code>CPV_MATOMO_BASE_URL</code>: Matomo server base URL. <em>Optional</em></li><li><code>CPV_MATOMO_ID_SITE</code>: Id of the Confluence public viewer site in Matomo. <em>Optional</em></li><li><code>CPV_GOOGLE_ANALYTICS</code>: Tag for tracking web analytics vis Google Analytics. <em>Optional</em></li>",4),y=a(`<p>If you have multiple Jira instances connected to your Confluence server you can provide the URL and access credentials so konviw will render properly the Jira Issues/Filter macros for each respective server:</p><ul><li><code>CPV_JIRA_System_JIRA_BASE_URL</code>: Jira server base URL. <em>Optional</em></li><li><code>CPV_JIRA_System_JIRA_API_USERNAME</code>: Jira API username (usually an email address). <em>Optional</em></li><li><code>CPV_JIRA_System_JIRA_API_TOKEN</code>: Jira API token. <em>Optional</em></li><li><code>CPV_JIRA_Other_JIRA_BASE_URL</code>: Jira server base URL. <em>Optional</em></li><li><code>CPV_JIRA_Other_JIRA_API_USERNAME</code>: Jira API username (usually an email address). <em>Optional</em></li><li><code>CPV_JIRA_Other_JIRA_API_TOKEN</code>: Jira API token. <em>Optional</em></li></ul><p>Credentials for Jira and Confluence servers may be the same if the username has enought rights to access to all the servers.</p><h2 id="development" tabindex="-1"><a class="header-anchor" href="#development" aria-hidden="true">#</a> Development</h2><ol><li>Clone the repo:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">git</span> clone https://github.com/Sanofi-IADC/konviw.git
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>Install packages:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token builtin class-name">cd</span> konviw <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li><p>Create an Atlassian API token: https://id.atlassian.com/manage/api-tokens</p></li><li><p>Copy <code>.env.example</code> to <code>.env</code> and edit your configuration.</p></li><li><p>Run the server in watch mode:</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">npm</span> run start:dev
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="6"><li>You can use the proxy on <code>http://localhost:3000/</code></li></ol><h2 id="documentation" tabindex="-1"><a class="header-anchor" href="#documentation" aria-hidden="true">#</a> Documentation</h2>`,12),_=s("We use "),x={href:"https://vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},w=s("VuePress"),C=s(" to maintain and publish the konviw online documentation. Check them locally with"),A=a(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">npm</span> run docs:dev
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>and deploy them in Github pages with</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">npm</span> run docs:deploy
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="advance-customizing" tabindex="-1"><a class="header-anchor" href="#advance-customizing" aria-hidden="true">#</a> Advance Customizing</h2><p>You can furher customize the way the pages are rendered and the default styles applying your own stylesheets.</p><p>In the folder <code>src/assets/scss</code> you will find all the scss stylesheets organized by formating group.</p><p>For instance editing the file <code>expander-panel.scss</code> you can personalize the style for your expander panels. Whether you prefer arrows instead of <code>+</code> / <code>-</code> symbols or change text size or color.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Expander pannel ========================================</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>container <span class="token punctuation">{</span>
  border<span class="token operator">-</span>radius<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  <span class="token literal-property property">border</span><span class="token operator">:</span> solid 1px <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token operator">--</span>border<span class="token operator">-</span>expander<span class="token punctuation">)</span><span class="token punctuation">;</span>
  margin<span class="token operator">-</span>top<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  margin<span class="token operator">-</span>bottom<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> 5px<span class="token punctuation">;</span>
  background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token operator">--</span>bg<span class="token operator">-</span>expander<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>control<span class="token operator">:</span>before <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;\\2795&quot;</span><span class="token punctuation">;</span> <span class="token comment">// symbol +</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>active<span class="token operator">:</span>before <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;\\2796&quot;</span><span class="token punctuation">;</span> <span class="token comment">// symbol -</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>control <span class="token punctuation">{</span>
  <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  font<span class="token operator">-</span>size<span class="token operator">:</span> 20px<span class="token punctuation">;</span>
  font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>control<span class="token operator">:</span>hover <span class="token punctuation">{</span>
  background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token operator">--</span>border<span class="token operator">-</span>expander<span class="token punctuation">)</span><span class="token punctuation">;</span>
  border<span class="token operator">-</span>radius<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
span<span class="token punctuation">.</span>expand<span class="token operator">-</span>control<span class="token operator">-</span>text <span class="token punctuation">{</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> 5px<span class="token punctuation">;</span>
  word<span class="token operator">-</span>wrap<span class="token operator">:</span> <span class="token keyword">break</span><span class="token operator">-</span>word<span class="token punctuation">;</span>
  white<span class="token operator">-</span>space<span class="token operator">:</span> normal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>content <span class="token punctuation">{</span>
  <span class="token literal-property property">transition</span><span class="token operator">:</span> max<span class="token operator">-</span>height <span class="token number">0</span><span class="token punctuation">.</span>3s ease<span class="token operator">-</span>out<span class="token punctuation">;</span>
  font<span class="token operator">-</span>size<span class="token operator">:</span> 18px<span class="token punctuation">;</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> 18px<span class="token punctuation">;</span>
  max<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>As you see we use CSS variables for the most common styles shared across components. You can access and modify all those variables from the file <code>variables.scss</code>.</p><h2 id="tests" tabindex="-1"><a class="header-anchor" href="#tests" aria-hidden="true">#</a> Tests</h2><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h3>`,11),I=s("We use "),S={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},R=n("strong",null,"Jest",-1),E=s(" to implement our unit tests. We will show you our unit testing "),P=n("strong",null,"strategy",-1),O=s(" for testing the "),T=n("strong",null,"Steps",-1),V=s(", with an example."),J=a(`<p><strong>Reminder:</strong> Unit tests are developers oriented tests. Their purposes are:</p><ul><li>To let developers add new functionnalities without breaking something</li><li>To make good documentation of what a component should do</li><li>Ensure that an isolated component is working as expected</li><li>Ensure the code is maintenable and well written (a bad code is difficult to test)</li></ul><h3 id="strategy" tabindex="-1"><a class="header-anchor" href="#strategy" aria-hidden="true">#</a> Strategy</h3><p>A classic unit test is done this way:</p><ol><li>Set up a context</li><li>Set the expected result for the context</li><li>Execute the piece of code we want to test on the context</li><li>Check if the result is the expected</li></ol><p>Example with a function:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiplication</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>First set the context</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then the expected result</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> expectedResult <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// according to the context</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Finally, call the function and check the result</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">multiplication</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This is <strong>straightforward</strong>, and actually this kind of strategy is enough for testing <strong>90%</strong> of your code. If not, maybe you should refactor/review your code. If you are not able to easily unit test a component, very often it&#39;s because the component does too many things (<strong>SOLID principle</strong>), or it does it in a too much complex way.</p><hr><p>We will do the same for testing our <strong>Steps</strong>:</p><ol><li>Make a html code with minimal useful content for the step (set up the context)</li><li>Make a html code we expect to the Step to produce (the expected result)</li><li>Finally, execute the Step on our context and check the result</li></ol><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>Consider the following Step:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Step <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> ContextService<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> $ <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCheerioBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#Content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1 class=&quot;titlePage&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>context<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This Step put a heading tag <em>h1</em> at the top of the html page with the title of the page context. So let&#39;s test it:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. Set up the context: Minimal html code needed</span>
<span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;html&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
      &lt;div id=&quot;Content&quot;&gt;
        &lt;p&gt;Test !&lt;/p&gt;
      &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;addHeaderTitle&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> context<span class="token operator">:</span> ContextService<span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> moduleRef <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createModuleRefForStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context <span class="token operator">=</span> moduleRef<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>ContextService<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ContextService<span class="token punctuation">)</span><span class="token punctuation">;</span>

    context<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token string">&#39;XXX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should add the h1 title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token function">addHeaderTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. Set up the context: Set the ContextService config</span>
    <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">&#39;I am the Title&#39;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">setHtmlBody</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. Set the expected result</span>
    <span class="token keyword">const</span> expectedResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1 class=&quot;titlePage&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token comment">// 3. Execute the code to test</span>
    <span class="token function">step</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. Make the assertion</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getHtmlBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>And that&#39;s it \u{1F609}.</p>`,23);function j(N,U){const e=p("ExternalLinkIcon");return o(),c(l,null,[u,n("ul",null,[d,n("li",null,[k,m,n("a",b,[h,t(e)]),g,f]),v]),y,n("p",null,[_,n("a",x,[w,t(e)]),C]),A,n("p",null,[I,n("a",S,[R,t(e)]),E,P,O,T,V]),J],64)}var M=r(i,[["render",j]]);export{M as default};
