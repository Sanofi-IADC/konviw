import{r as p,o,c,a as n,f as t,F as l,d as s,h as e}from"./app.399a989b.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},r=n("h2",{id:"unit-tests-with-jest",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#unit-tests-with-jest","aria-hidden":"true"},"#"),s(" Unit Tests with Jest")],-1),k=n("h3",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),d=s("We use "),h={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"Jest",-1),b=s(" to implement our unit tests. We will show you our unit testing "),g=n("strong",null,"strategy",-1),f=s(" for testing the "),v=n("strong",null,"Steps",-1),y=s(", with an example."),x=e(`<p><strong>Reminder:</strong> Unit tests are developers oriented tests. Their purposes are:</p><ul><li>To let developers add new functionnalities without breaking something</li><li>To make good documentation of what a component should do</li><li>Ensure that an isolated component is working as expected</li><li>Ensure the code is maintenable and well written (a bad code is difficult to test)</li></ul><h3 id="strategy" tabindex="-1"><a class="header-anchor" href="#strategy" aria-hidden="true">#</a> Strategy</h3><p>A classic unit test is done this way:</p><ol><li>Set up a context</li><li>Set the expected result for the context</li><li>Execute the piece of code we want to test on the context</li><li>Check if the result is the expected</li></ol><p>Example with a function:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiplication</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>First set the context</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then the expected result</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> expectedResult <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// according to the context</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Finally, call the function and check the result</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">multiplication</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This is <strong>straightforward</strong>, and actually this kind of strategy is enough for testing <strong>90%</strong> of your code. If not, maybe you should refactor/review your code. If you are not able to easily unit test a component, very often it&#39;s because the component does too many things (<strong>SOLID principle</strong>), or it does it in a too much complex way.</p><hr><p>We will do the same for testing our <strong>Steps</strong>:</p><ol><li>Make a html code with minimal useful content for the step (set up the context)</li><li>Make a html code we expect to the Step to produce (the expected result)</li><li>Finally, execute the Step on our context and check the result</li></ol><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>Consider the following Step:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Step <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> ContextService<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> $ <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCheerioBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#Content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1 class=&quot;titlePage&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>context<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This Step put a heading tag <em>h1</em> at the top of the html page with the title of the page context. So let&#39;s test it:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. Set up the context: Minimal html code needed</span>
<span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;html&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
      &lt;div id=&quot;Content&quot;&gt;
        &lt;p&gt;Test !&lt;/p&gt;
      &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;addHeaderTitle&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> context<span class="token operator">:</span> ContextService<span class="token punctuation">;</span>

  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> moduleRef <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createModuleRefForStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context <span class="token operator">=</span> moduleRef<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>ContextService<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ContextService<span class="token punctuation">)</span><span class="token punctuation">;</span>

    context<span class="token punctuation">.</span><span class="token function">initPageContext</span><span class="token punctuation">(</span><span class="token string">&#39;XXX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should add the h1 title&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token function">addHeaderTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1. Set up the context: Set the ContextService config</span>
    <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">&#39;I am the Title&#39;</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">setHtmlBody</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. Set the expected result</span>
    <span class="token keyword">const</span> expectedResult <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1 class=&quot;titlePage&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token comment">// 3. Execute the code to test</span>
    <span class="token function">step</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. Make the assertion</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getHtmlBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>And that&#39;s it \u{1F609}.</p><h2 id="e2e-visual-tests-with-cypress" tabindex="-1"><a class="header-anchor" href="#e2e-visual-tests-with-cypress" aria-hidden="true">#</a> E2E Visual Tests with Cypress</h2><h3 id="introduction-1" tabindex="-1"><a class="header-anchor" href="#introduction-1" aria-hidden="true">#</a> Introduction</h3>`,25),_=s("We use "),w={href:"https://www.cypress.io/",target:"_blank",rel:"noopener noreferrer"},S=n("strong",null,"Cypress",-1),E=s(" and the plugin "),R={href:"https://github.com/meinaart/cypress-plugin-snapshots",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"cypress-plugin-snapshots",-1),T=s(" to implement our end-to-end visual tests. We will see here our visual testing "),j=n("strong",null,"strategy",-1),I=s(" for testing the confluence "),B=n("strong",null,"pages",-1),U=s(" through a running version of Konviw, with an example."),q=e(`<h3 id="strategy-1" tabindex="-1"><a class="header-anchor" href="#strategy-1" aria-hidden="true">#</a> Strategy</h3><p>E2E Visual Tests consists of taking snapshots of each pages the first time you run the tests, then you need to add and commit the generated snapshots to git. Then each time a Pull Request is created or a PR is merged in master, github will trigger the Cypress Tests workflow which run the cypress tests against the running version of konviw on vercel: https://konviw.vercel.app/cpv.</p><p>Cypress will compare each commited snapshots with the running konviw pages on vercel and will fail in case the snapshot doesn&#39;t match the live page.</p><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h3><ol><li>Create your confluence page for visual testing and get the ID of the page</li><li>Create your test in <code>tests/e2e/cypress/integration/[YOUR_TEST].spec.ts</code></li></ol><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span>

<span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;match the whole page&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>
      <span class="token string">&#39;/wiki/spaces/KONVIW/pages/[PAGE_ID]/Example&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      cy<span class="token punctuation">.</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchImageSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="3"><li>Run the tests with cypress</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># In order to run the tests against an URL, you will need to execute this command with the correct URL for CYPRESS_BASE_URL</span>
<span class="token comment"># By default it will take the URL specified in cypress.json</span>
<span class="token assign-left variable">CYPRESS_BASE_URL</span><span class="token operator">=</span>https://konviw.vercel.app/cpv <span class="token function">npm</span> run cypress:run
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>You can also run the GUI version:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">CYPRESS_BASE_URL</span><span class="token operator">=</span>https://konviw.vercel.app/cpv <span class="token function">npm</span> run cypress:open
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>It will generate any new snapshot for new tests you&#39;ve added.</p><ol start="4"><li>Add these snapshots to git, commit and push your tests</li></ol><h3 id="update-snapshots" tabindex="-1"><a class="header-anchor" href="#update-snapshots" aria-hidden="true">#</a> Update snapshots</h3><p>In case you&#39;ve added some changes which break an existing test, you need to delete the snapshot and re-run the tests to update the snapshot:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 1. Delete the snapshot</span>
<span class="token function">rm</span> -f tests/e2e/cypress/integration/__image_snapshots__/Example.png

<span class="token comment"># 2. Re-run the test</span>
<span class="token assign-left variable">CYPRESS_BASE_URL</span><span class="token operator">=</span>https://konviw.vercel.app/cpv <span class="token function">npm</span> run cypress:run

<span class="token comment"># 3. Add, commit &amp; push</span>
<span class="token function">git</span> <span class="token function">add</span> tests/e2e/cypress/integration/__image_snapshots__/Example.png
<span class="token function">git</span> commit -m <span class="token string">&quot;fix: test&quot;</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,15);function L(P,A){const a=p("ExternalLinkIcon");return o(),c(l,null,[r,k,n("p",null,[d,n("a",h,[m,t(a)]),b,g,f,v,y]),x,n("p",null,[_,n("a",w,[S,t(a)]),E,n("a",R,[C,t(a)]),T,j,I,B,U]),q],64)}var M=i(u,[["render",L]]);export{M as default};
