import{r as p,o as t,c as r,a as n,b as o,F as l,f as a,d as s}from"./app.0f457beb.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=a(`<h2 id="manual-setup" tabindex="-1"><a class="header-anchor" href="#manual-setup" aria-hidden="true">#</a> Manual setup</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">git</span> clone https://github.com/Sanofi-IADC/konviw.git

\u279C <span class="token builtin class-name">cd</span> konviw <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>

\u279C <span class="token function">npm</span> run build

\u279C <span class="token function">npm</span> run start
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="docker-setup" tabindex="-1"><a class="header-anchor" href="#docker-setup" aria-hidden="true">#</a> Docker setup</h2><ul><li>[ ] TODO</li></ul><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Configuration is made with environment variables. They can also be defined with the <code>.env</code> file when running locally. Check the <code>.env.example</code> for an example of environment file.</p>`,6),d=a("<li><code>NODE_ENV</code>: <code>development</code>, <code>test</code> or <code>production</code>. Default: <code>production</code></li><li><code>CPV_BASEPATH</code>: the base path where the app is exposed. Useful when exposed behind a reverse proxy. Used to generate links. Default: <code>/</code> (but defined as <code>/cpv</code> in production)</li><li><code>CPV_BASEHOST</code>: the domain URL to compose full URL to resolve images and links from the API, like https://www.example.com. <strong>Required</strong></li><li><code>CPV_CONFLUENCE_BASE_URL</code>: Confluence server base URL. <strong>Required</strong></li><li><code>CPV_CONFLUENCE_API_USERNAME</code>: Confluence API username (usually an email address). <strong>Required</strong></li>",5),m=n("code",null,"CPV_CONFLUENCE_API_TOKEN",-1),b=s(": Confluence API token (can be created "),k={href:"https://id.atlassian.com/manage/api-tokens",target:"_blank",rel:"noopener noreferrer"},h=s("here"),_=s("). "),g=n("strong",null,"Required",-1),v=a("<li><code>CPV_KONVIW_PRIVATE_PAGE</code>: A label to tag pages as private. <strong>Required</strong></li><li><code>CPV_MATOMO_BASE_URL</code>: Matomo server base URL. <em>Optional</em></li><li><code>CPV_MATOMO_ID_SITE</code>: Id of the Confluence public viewer site in Matomo. <em>Optional</em></li><li><code>CPV_GOOGLE_ANALYTICS</code>: Tag for tracking web analytics vis Google Analytics. <em>Optional</em></li>",4),f=a(`<p>If you have multiple Jira instances connected to your Confluence server you can provide the URL and access credentials so konviw will render properly the Jira Issues/Filter macros for each respective server:</p><ul><li><code>CPV_JIRA_System_JIRA_BASE_URL</code>: Jira server base URL. <em>Optional</em></li><li><code>CPV_JIRA_System_JIRA_API_USERNAME</code>: Jira API username (usually an email address). <em>Optional</em></li><li><code>CPV_JIRA_System_JIRA_API_TOKEN</code>: Jira API token. <em>Optional</em></li><li><code>CPV_JIRA_Other_JIRA_BASE_URL</code>: Jira server base URL. <em>Optional</em></li><li><code>CPV_JIRA_Other_JIRA_API_USERNAME</code>: Jira API username (usually an email address). <em>Optional</em></li><li><code>CPV_JIRA_Other_JIRA_API_TOKEN</code>: Jira API token. <em>Optional</em></li></ul><p>Credentials for Jira and Confluence servers may be the same if the username has enought rights to access to all the servers.</p><h2 id="development" tabindex="-1"><a class="header-anchor" href="#development" aria-hidden="true">#</a> Development</h2><ol><li>Clone the repo:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">git</span> clone https://github.com/Sanofi-IADC/konviw.git
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>Install packages:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token builtin class-name">cd</span> konviw <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li><p>Create an Atlassian API token: https://id.atlassian.com/manage/api-tokens</p></li><li><p>Copy <code>.env.example</code> to <code>.env</code> and edit your configuration.</p></li><li><p>Run the server in watch mode:</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">npm</span> run start:dev
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="6"><li>You can use the proxy on <code>http://localhost:3000/</code></li></ol><h2 id="documentation" tabindex="-1"><a class="header-anchor" href="#documentation" aria-hidden="true">#</a> Documentation</h2>`,12),y=s("We use "),x={href:"https://vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},A=s("VuePress"),C=s(" to maintain and publish the konviw online documentation. Check them locally with"),I=a(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">npm</span> run docs:dev
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>and deploy them in Github pages with</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>\u279C <span class="token function">npm</span> run docs:deploy
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="advance-customizing" tabindex="-1"><a class="header-anchor" href="#advance-customizing" aria-hidden="true">#</a> Advance Customizing</h2><p>You can furher customize the way the pages are rendered and the default styles applying your own stylesheets.</p><p>In the folder <code>src/assets/scss</code> you will find all the scss stylesheets organized by formating group.</p><p>For instance editing the file <code>expander-panel.scss</code> you can personalize the style for your expander panels. Whether you prefer arrows instead of <code>+</code> / <code>-</code> symbols or change text size or color.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Expander pannel ========================================</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>container <span class="token punctuation">{</span>
  border<span class="token operator">-</span>radius<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  <span class="token literal-property property">border</span><span class="token operator">:</span> solid 1px <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token operator">--</span>border<span class="token operator">-</span>expander<span class="token punctuation">)</span><span class="token punctuation">;</span>
  margin<span class="token operator">-</span>top<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  margin<span class="token operator">-</span>bottom<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> 5px<span class="token punctuation">;</span>
  background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token operator">--</span>bg<span class="token operator">-</span>expander<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>control<span class="token operator">:</span>before <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;\\2795&quot;</span><span class="token punctuation">;</span> <span class="token comment">// symbol +</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>active<span class="token operator">:</span>before <span class="token punctuation">{</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;\\2796&quot;</span><span class="token punctuation">;</span> <span class="token comment">// symbol -</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>control <span class="token punctuation">{</span>
  <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  font<span class="token operator">-</span>size<span class="token operator">:</span> 20px<span class="token punctuation">;</span>
  font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>control<span class="token operator">:</span>hover <span class="token punctuation">{</span>
  background<span class="token operator">-</span>color<span class="token operator">:</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token operator">--</span>border<span class="token operator">-</span>expander<span class="token punctuation">)</span><span class="token punctuation">;</span>
  border<span class="token operator">-</span>radius<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
span<span class="token punctuation">.</span>expand<span class="token operator">-</span>control<span class="token operator">-</span>text <span class="token punctuation">{</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> 5px<span class="token punctuation">;</span>
  word<span class="token operator">-</span>wrap<span class="token operator">:</span> <span class="token keyword">break</span><span class="token operator">-</span>word<span class="token punctuation">;</span>
  white<span class="token operator">-</span>space<span class="token operator">:</span> normal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>expand<span class="token operator">-</span>content <span class="token punctuation">{</span>
  <span class="token literal-property property">transition</span><span class="token operator">:</span> max<span class="token operator">-</span>height <span class="token number">0</span><span class="token punctuation">.</span>3s ease<span class="token operator">-</span>out<span class="token punctuation">;</span>
  font<span class="token operator">-</span>size<span class="token operator">:</span> 18px<span class="token punctuation">;</span>
  <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> 18px<span class="token punctuation">;</span>
  max<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>As you see we use CSS variables for the most common styles shared across components. You can access and modify all those variables from the file <code>variables.scss</code>.</p>`,9);function w(P,R){const e=p("ExternalLinkIcon");return t(),r(l,null,[u,n("ul",null,[d,n("li",null,[m,b,n("a",k,[h,o(e)]),_,g]),v]),f,n("p",null,[y,n("a",x,[A,o(e)]),C]),I],64)}var V=c(i,[["render",w]]);export{V as default};
